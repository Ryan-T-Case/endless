{"version":3,"sources":["utils/constants/Colors.js","utils/api/API.js","utils/constants/ApiConstants.js","utils/helpers/StepUtils.js","components/icon/EndlessLogo.jsx","components/TopBar/TopBar.jsx","components/Banner/Banner.jsx","components/Button/Button.jsx","components/HowItWorks/HowItWorks.jsx","components/HowItWorks/StepCard/StepCard.jsx","App.js","serviceWorker.js","index.js"],"names":["Colors","API","fetch","response","json","StepUtils","step","latestVersionContent","versionContent","slice","forEach","versionData","currentVersionEffectiveDate","moment","effectiveDate","latestVersionEffectiveDate","isAfter","steps","sort","s1","s2","parseInt","stepNumber","EndlessLogo","width","height","fill","viewBox","transform","d","TopBar","backGroundColor","className","getTopBarColorClassName","Banner","label","onClick","Button","toUpperCase","HowItWorks","useState","setSteps","useEffect","getAllSteps","then","stepsData","length","unsortedSteps","sortedSteps","sortStepsByStepNumber","map","latestVersionData","getLatestVersionContent","key","id","title","body","StepCard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a9cc17c.chunk.js","sourcesContent":["export const Colors = {\r\n    primary: \"#47E4C2\",\r\n    secondary: \"#222222\",\r\n    offWhite: \"#F2F1EF\"\r\n}\r\n","import { GET_ALL_STEPS_ENDPOINT } from \"../constants\"\r\n\r\nexport class API {\r\n    static async getAllSteps() {\r\n        try {\r\n            const response = await fetch(GET_ALL_STEPS_ENDPOINT)\r\n            return response.json()\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n}\r\n","export const GET_ALL_STEPS_ENDPOINT =\r\n    \"https://uqnzta2geb.execute-api.us-east-1.amazonaws.com/default/FrontEndCodeChallenge\"\r\n","import moment from \"moment\"\r\n\r\nexport class StepUtils {\r\n    static getLatestVersionContent(step) {\r\n        // We grab the first versionContent so we can compare it to the next\r\n        let latestVersionContent = step.versionContent[0]\r\n\r\n        // Since we have already grabbed the first versionContent, we can remove it\r\n        // here before checking against the others\r\n        step.versionContent.slice(1).forEach(versionData => {\r\n            const currentVersionEffectiveDate = moment(\r\n                versionData.effectiveDate\r\n            )\r\n            const latestVersionEffectiveDate = moment(\r\n                latestVersionContent.effectiveDate\r\n            )\r\n\r\n            if (\r\n                currentVersionEffectiveDate.isAfter(latestVersionEffectiveDate)\r\n            ) {\r\n                latestVersionContent = versionData\r\n            }\r\n        })\r\n\r\n        return latestVersionContent\r\n    }\r\n\r\n    static sortStepsByStepNumber(steps) {\r\n        const sortedSteps = steps.sort(\r\n            (s1, s2) => parseInt(s1.stepNumber) - parseInt(s2.stepNumber)\r\n        )\r\n\r\n        return sortedSteps\r\n    }\r\n}\r\n","import React from \"react\"\r\nimport { Colors } from \"../../utils\"\r\n\r\nexport const EndlessLogo = ({\r\n    width = \"358.3\",\r\n    height = \"52.1\",\r\n    fill = Colors.primary\r\n}) => {\r\n    return (\r\n        <svg\r\n            width={width}\r\n            height={height}\r\n            fill={fill}\r\n            viewBox=\"0 0 358.3 52.1\"\r\n            transform=\"translate(-75, 0)\"\r\n        >\r\n            <path d=\"M0 40.9h1.7c.7 0 1.9-1.2 1.9-1.9V13.7c0-.7-1.2-1.9-1.9-1.9H0V1h44.5v17.4H33.2l-1.7-5.7h-7.9v7.2h10.9v11.6H23.6v8.6h8.1l1.5-7h11.9v18.3H.1V40.9H0zM51.4 40.9h1.7c.7 0 1.9-1.2 1.9-1.9V13.7c0-.7-1.2-1.9-1.9-1.9h-1.7V1h22.5l12.4 22.5h.2V11.8h-3.7V1H104v10.8h-1.4c-.7 0-1.9 1.2-1.9 1.9v37.7H83.3L69.5 26.3h-.2v14.6h4v10.4H51.6V40.9h-.2zM110.1 40.9h1.7c.7 0 1.9-1.2 1.9-1.9V13.7c0-.7-1.2-1.9-1.9-1.9h-1.7V1h25.1c20.2 0 28.3 8.1 28.3 24.8 0 16.7-8.4 25.6-28.9 25.6h-24.5V40.9zm24.5-.5c5.6 0 8.5-4.4 8.5-13.8s-2.7-14-8.5-14h-.9v27.9h.9v-.1zM168.8 40.9h1.7c.7 0 1.9-1.2 1.9-1.9V13.7c0-.7-1.2-1.9-1.9-1.9h-1.7V1h28.7v10.8h-5.2v28.3h7.3l1.5-8.3H213v19.6h-44.3l.1-10.5zM219.2 40.9h1.7c.7 0 1.9-1.2 1.9-1.9V13.7c0-.7-1.2-1.9-1.9-1.9h-1.7V1h44.4v17.4h-11.3l-1.7-5.7h-7.9v7.2h10.9v11.6h-10.9v8.6h8.1l1.5-7h11.9v18.3h-45V40.9zM282.6 51.3h-12V35h12.7l1.7 5.6c.8.1 1.7.2 2.7.2 2.6 0 4.8-.8 4.8-3.2 0-2.2-1.8-3-6.3-4.1-7.5-1.9-15.6-4.3-15.6-16.6C270.6 4.4 279.2 0 290 0c5.1 0 7.6.4 10.1.9h9.9V16h-12.5l-1.7-5.3c-.6-.1-1.4-.1-2.2-.1-3.2 0-5 1-5 3.4s2.2 2.9 4.5 3.5c14 3.9 18.4 7.2 18.4 17.2 0 11.3-5.9 17.4-20.1 17.4-3.5.1-6-.2-8.8-.8zM329.5 51.3h-12V35h12.7l1.7 5.6c.8.1 1.7.2 2.7.2 2.6 0 4.8-.8 4.8-3.2 0-2.2-1.8-3-6.3-4.1-7.5-1.9-15.6-4.3-15.6-16.6 0-12.5 8.6-16.9 19.4-16.9 5.1 0 7.6.4 10.1.9h9.9V16h-12.6l-1.7-5.3c-.6-.1-1.4-.1-2.2-.1-3.2 0-5 1-5 3.4s2.2 2.9 4.5 3.5c14 3.9 18.4 7.2 18.4 17.2 0 11.3-5.9 17.4-20.1 17.4-3.4.1-5.8-.2-8.7-.8z\" />\r\n        </svg>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nimport { EndlessLogo } from \"../../components\"\r\nimport { Colors } from \"../../utils\"\r\nimport \"./index.css\"\r\n\r\nexport const TopBar = ({ backGroundColor = Colors.secondary }) => {\r\n    const getTopBarColorClassName = () => {\r\n        switch (backGroundColor) {\r\n            case Colors.primary:\r\n                return \"bg-primary\"\r\n            case Colors.offWhite:\r\n                return \"bg-offWhite\"\r\n\r\n            default:\r\n                return \"bg-secondary\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <nav className={`top-bar ${getTopBarColorClassName()}`}>\r\n            <span className=\"offset-logo\">\r\n                <EndlessLogo width=\"300\" height=\"24\" />\r\n            </span>\r\n        </nav>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nimport { Button } from \"../../components\"\r\nimport \"./index.css\"\r\n\r\nexport const Banner = () => {\r\n    const handleClickGetStarted = () => {\r\n        // TODO: A click event would need to be added here\r\n    }\r\n\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner-container text-white\">\r\n                <h2 className=\"top-heading\">New Games &amp; Accessories</h2>\r\n                <h1 className=\"main-heading\">Monthly packages.</h1>\r\n                <h1 className=\"main-heading\">Excitement delivered daily.</h1>\r\n                <p className=\"paragraph\">\r\n                    What's the best way to shop for the latest video games and\r\n                    peripherals? How about never shooing at all? You'll get new\r\n                    stuff on your doorstep &ndash; every month.\r\n                </p>\r\n                <Button label=\"Get Started\" onClick={handleClickGetStarted} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nimport \"./index.css\"\r\n\r\nexport const Button = ({ label, onClick }) => {\r\n    const labelToUpperCase = () => {\r\n        return label.toUpperCase()\r\n    }\r\n\r\n    return (\r\n        <button className=\"button-primary\" onClick={onClick}>\r\n            {labelToUpperCase()}\r\n        </button>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\"\r\n\r\nimport { API, StepUtils } from \"../../utils\"\r\nimport { StepCard } from \"../../components\"\r\nimport \"./index.css\"\r\n\r\nexport const HowItWorks = () => {\r\n    const [steps, setSteps] = useState([])\r\n\r\n    useEffect(() => {\r\n        API.getAllSteps().then(stepsData => {\r\n            if (stepsData && stepsData.length) {\r\n                const unsortedSteps = stepsData\r\n                const sortedSteps = StepUtils.sortStepsByStepNumber(\r\n                    unsortedSteps\r\n                )\r\n                setSteps(sortedSteps)\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"how-it-works\">\r\n            <h2 className=\"title\">How It Works</h2>\r\n            <div className=\"card-deck\">\r\n                {steps.length &&\r\n                    steps.map(step => {\r\n                        const latestVersionData = StepUtils.getLatestVersionContent(\r\n                            step\r\n                        )\r\n\r\n                        return (\r\n                            <StepCard\r\n                                key={step.id}\r\n                                stepNumber={step.stepNumber}\r\n                                title={latestVersionData.title}\r\n                                body={latestVersionData.body}\r\n                            />\r\n                        )\r\n                    })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\n\r\nimport \"./index.css\"\r\n\r\nexport const StepCard = ({ stepNumber, title, body }) => {\r\n    const getFormattedStepNumber = () => {\r\n        return `0${stepNumber}`\r\n    }\r\n\r\n    const getUpperCaseTitle = () => {\r\n        return title.toUpperCase()\r\n    }\r\n\r\n    return (\r\n        <div className=\"step-card\">\r\n            <div className=\"step-number\">{getFormattedStepNumber()}</div>\r\n            <h2 className=\"step-title\">{getUpperCaseTitle()}</h2>\r\n            <p className=\"step-body\">{body}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\nimport { TopBar, Banner, HowItWorks } from \"./components\"\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TopBar />\n            <Banner />\n            <HowItWorks />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nimport \"./index.css\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}